" Chris Laverdiere's vimrc
" Requires: plug.vim
" Optional: ctags, fzf, git, cppman, pylint

" TODO try editorconfig

" Shell compatibility settings.
set shell=bash
set background=dark
set nocompatible

" History settings
set history=10000

" Buffer settings
set hidden

" Case settings
set ignorecase
set smartcase
set infercase

" Clipboard settings
set clipboard=unnamedplus

" Search settings
set incsearch
set hlsearch

" Tabbing / Indentation
set expandtab
set tabstop=4
set shiftwidth=4
set smarttab
set autoindent
set textwidth=79
set wildmenu
set wildmode=full

" Scrolling
set scrolloff=3

" Folds
set foldmethod=indent
set nofoldenable

" Backups
set noswapfile
set backup
set backupdir=~/.vimbak
set undofile
set undodir=~/.vimundo

" Man pages
set keywordprg=:Man
let g:ft_man_open_mode = 'vert'

" Spelling / Dictionary
set dictionary=/usr/share/dict/cracklib-small
au BufNewFile,BufRead *.txt setlocal spell
au BufNewFile,BufRead *.md setlocal spell

" Completion
" set completeopt=longest
set completeopt-=preview

" Misc
set gdefault
set nonumber
set laststatus=1
set scrolloff=3
set cryptmethod=blowfish2
set timeoutlen=1000
set showcmd
set formatoptions+=jn
set nojoinspaces

" Plugins (mostly syntax files and motion extensions)
" MVPs: kana, tpope
runtime macros/matchit.vim
runtime ftplugin/man.vim
call plug#begin('~/.vim/plugged')

" Plug 'beyondmarc/opengl.vim', { 'for': ['c', 'cpp'] }
" Plug 'godlygeek/tabular'
" Plug 'tikhomirov/vim-glsl'
" Plug 'rust-lang/rust.vim', { 'for': 'rust' }
" Plug 'racer-rust/vim-racer', { 'for': 'rust' }
Plug 'Rip-Rip/clang_complete', { 'for': ['c', 'cpp'] }
Plug 'SirVer/ultisnips'
" Plug 'glts/vim-textobj-comment'
Plug 'bps/vim-textobj-python', { 'for': 'python' }
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'eagletmt/neco-ghc', { 'for': 'haskell' }
Plug 'honza/vim-snippets'
Plug 'hynek/vim-python-pep8-indent', { 'for': 'python' }
Plug 'itchyny/vim-haskell-indent', { 'for': 'haskell' }
Plug 'jpalardy/vim-slime'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-plug'
Plug 'kana/vim-altr'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-user'
Plug 'ledger/vim-ledger', { 'for': 'ledger' }
Plug 'mbbill/undotree'
Plug 'mhinz/vim-grepper'
Plug 'michaeljsmith/vim-indent-object'
Plug 'milkypostman/vim-togglelist'
Plug 'morhetz/gruvbox'
Plug 'nelstrom/vim-visual-star-search'
" Plug 'octol/vim-cpp-enhanced-highlight', { 'for': ['c', 'cpp'] }
Plug 'szw/vim-g'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'triglav/vim-visual-increment'
Plug 'wellle/targets.vim'
Plug 'nelstrom/vim-markdown-folding'

call plug#end()

filetype plugin indent on
syntax on

" Critical remaps
map <Space> <Leader>
nnoremap Y y$
inoremap jk <esc>
nnoremap ' `
nnoremap ` '
nnoremap - :Ex<CR>

" Repeat maps
vnoremap . :normal .<CR>
xnoremap @q :normal @q<CR>

" Spelling maps
inoremap <C-y> <c-g>u<Esc>[s1z=`]a<c-g>u
nnoremap <C-y> [s1z=<c-o>

" Mouse scrolling
set mouse=a

" Window resize maps
nnoremap <Left> 5<C-w><
nnoremap <Right> 5<C-w>>
nnoremap <Up> 5<C-w>-
nnoremap <Down> 5<C-w>+

" Window movement maps
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
inoremap <C-h> <esc><C-w>h
inoremap <C-j> <esc><C-w>j
inoremap <C-k> <esc><C-w>k
inoremap <C-l> <esc><C-w>l

" Misc maps
nnoremap <silent> dsa ds}dF\
inoremap <C-]> {<CR>}<esc>O
imap <c-x><c-g> <plug>(fzf-complete-path)
nnoremap gK :!cppman <C-r><C-w><CR>

" Commands
function! s:EditSameDir(filename)
    let l:newfile = expand('%:p:h') . '/' . a:filename
    execute 'edit' l:newfile
endfunction
command! -nargs=1 E call s:EditSameDir(<f-args>)

" Leader Mappings
nmap <Leader>O <Plug>(altr-forward)
nnoremap <Leader>C :BCommits<CR>
nnoremap <Leader>T :!ctags -R<CR><CR>
nnoremap <Leader>V :sp<CR>
nnoremap <Leader>asc ggVG:Tab /;<CR>
nnoremap <Leader>bb :FZFBuffers<CR>
nnoremap <Leader>c :make<CR>
nnoremap <Leader>fed :e $MYVIMRC<CR>
nnoremap <Leader>fl :FZFFiles ~/<CR>
nnoremap <Leader>fs :w<CR>
nnoremap <Leader>gcc :!gcc -g -std=c99 % -o %< && ./%<<CR>
nnoremap <Leader>gpp :!g++ -g -std=c++11 % -o %< && ./%<<CR>
nnoremap <Leader>mt :make tests<CR>
nnoremap <Leader>pf :FZFFiles<CR>
nnoremap <Leader>pi :PlugInstall<CR>
nnoremap <Leader>py :!python %<CR>
nnoremap <Leader>q :q!<CR>
nnoremap <Leader>rl :so $MYVIMRC<CR>
nnoremap <Leader>ss :FZFBLines<CR>
nnoremap <Leader>ta vip!pandoc -t markdown<CR>
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>tr :%s/\s*$//g<CR><C-o>zz
nnoremap <Leader>u :UndotreeToggle<CR>:UndotreeFocus<CR>
nnoremap <Leader>v :vs<CR>
nnoremap <script> <silent> <leader>el :call ToggleQuickfixList()<CR>
nnoremap <silent> <Leader>. :FZFAg <C-R><C-W><CR>
nnoremap <silent> <Leader>/ :FZFAg <CR>
nnoremap <silent> <Leader>sc :nohlsearch<CR>
noremap <Leader>G :Google<CR>

set pastetoggle=<Leader>pt

" Remove trailing whitespace function.
fun! RTW()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
command! RTW call RTW()

" FZF
let g:fzf_command_prefix = 'FZF'

" Haskell
au FileType haskell nnoremap <buffer> <Leader>T :!hasktags .<CR><CR>
au FileType haskell setlocal omnifunc=necoghc#omnifunc
au FileType haskell setlocal makeprg=ghc\ -e\ :q\ %
au FileType haskell setlocal errorformat=
                \%-G,
                \%-Z\ %#,
                \%W%f:%l:%c:\ Warning:\ %m,
                \%E%f:%l:%c:\ %m,
                \%E%>%f:%l:%c:,
                \%+C\ \ %#%m,
                \%W%>%f:%l:%c:,
                \%+C\ \ %#%tarning:\ %m,

" Vim-grepper
let g:grepper = {'tools': ['ag'], 'open': 0, 'jump': 1, 'prompt': 0}
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" Toggle list
let g:toggle_list_no_mappings = 1

" Clang complete (for c/c++)
let g:clang_library_path='/usr/lib'
let g:clang_complete_auto=0
let g:clang_user_options = '-std=c++11'
let g:clang_complete_macros=1
let g:clang_make_default_keymappings=0
au Filetype c,cpp nnoremap <silent> <buffer> g
    \ :call g:ClangGotoDeclaration()<CR>

" Cpp highlighting
let g:cpp_class_scope_highlight = 1

" Python: use pydoc for man-pages
" au FileType python setlocal keywordprg=pydoc
au FileType python setlocal makeprg=pylint\ -r\ n\ -f\ parseable\ %

" Python jedi
let g:jedi#auto_initialization = 0
let g:jedi#show_call_signatures = 2
aug jedi_group
    au!
    au Filetype python call jedi#configure_call_signatures()
    au Filetype python setlocal omnifunc=jedi#completions
    au Filetype python nnoremap <silent> <buffer> K
        \ :call jedi#show_documentation()<CR>
    au Filetype python nnoremap <silent> <buffer> g
        \ :call jedi#goto()<CR>
aug END

" Rust racer
let g:racer_no_default_keymappings = 1
aug rust_group
    au!
    au Filetype rust compiler rustc
    au Filetype rust nnoremap <silent><buffer> <Plug>RacerGoToDefinitionDrect
        \ :call <SID>RacerGoToDefinition()<CR>
    au Filetype rust nnoremap <silent><buffer> <Plug>RacerShowDocumentation
        \ :call <SID>RacerShowDocumentation()<CR>
    au Filetype rust nmap <buffer> g <Plug>RacerGoToDefinitionDrect
    au Filetype rust nmap <buffer> K <Plug>RacerShowDocumentation
aug END

" Markdown compatibility.
au BufNewFile,BufReadPost *.md setlocal filetype=markdown
au Filetype markdown setlocal commentstring=[//]:\ #\ (%s)

" Ultisnips
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips/"

aug prewrite_group
    au!
    " Remove trailing whitespace on save.
    au BufWritePre * :call RTW()
aug END

" Ledger
let g:ledger_align_at = 40
au Filetype ledger nnoremap <buffer> <leader>c :setlocal makeprg=ledger \
            \| make -f % balance<CR>
au Filetype ledger vnoremap <buffer> = :LedgerAlign<CR>

" Slime (for REPLs)
let g:slime_target = "tmux"
let g:slime_paste_file = "$HOME/.slime_paste"
let g:slime_default_config = {"socket_name": "default", "target_pane": "0"}
let g:slime_no_mappings = 1
let g:slime_dont_ask_default = 1
let g:slime_python_ipython = 1
xmap gs <Plug>SlimeRegionSend
nmap gs <Plug>SlimeMotionSend
nmap gss <Plug>SlimeLineSend

" Disable ftplugin-mail maps.
let no_mail_maps=1

" Add to jumplist for multi j/k jumps.
nnoremap <silent> k :<C-U>execute 'normal!'
      \ (v:count > 1 ? "m'" . v:count : '') . 'k'<CR>
nnoremap <silent> j :<C-U>execute 'normal!'
      \ (v:count > 1 ? "m'" . v:count : '') . 'j'<CR>

" Color scheme must be loaded at the end.
set background=dark
colorscheme gruvbox
