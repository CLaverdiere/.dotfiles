" Chris Laverdiere's vimrc
" Requires: plug.vim
" Optional: ctags, fzf, git, cppman, pylint
" TODO ale fixers
" TODO editorconfig

" Shell compatibility settings.
set shell=bash
set background=dark
set nocompatible

" History settings
set history=10000

" Buffer settings
set hidden

" Case settings
set ignorecase
set smartcase
set infercase

" Clipboard settings
set clipboard=unnamedplus

" Search settings
set incsearch
set hlsearch

" Tabbing / Indentation
set expandtab
set tabstop=4
set shiftwidth=4
set smarttab
set autoindent
set textwidth=79
set wildmenu
set wildmode=full

" Scrolling
set scrolloff=3

" Folds
set foldmethod=indent
set nofoldenable

" Backups
set noswapfile
set backup
set backupdir=~/.vimbak
set undofile
set undodir=~/.vimundo

" Man pages
set keywordprg=:Man
let g:ft_man_open_mode = 'vert'

" Spelling / Dictionary
set dictionary=/usr/share/dict/cracklib-small
au BufNewFile,BufRead *.txt setlocal spell
au BufNewFile,BufRead *.md setlocal spell

" Completion
" set completeopt=longest
set completeopt-=preview

" Misc
set gdefault
set nonumber
set laststatus=1
set scrolloff=3
set cryptmethod=blowfish2
set timeoutlen=1000
set showcmd
set formatoptions+=jn
set nojoinspaces

" Plugins (mostly syntax files and motion extensions)
" MVPs: kana, tpope
runtime macros/matchit.vim
runtime ftplugin/man.vim
call plug#begin('~/.vim/plugged')

" Plug 'beyondmarc/opengl.vim', { 'for': ['c', 'cpp'] }
Plug 'tikhomirov/vim-glsl'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'racer-rust/vim-racer', { 'for': 'rust' }
Plug 'Rip-Rip/clang_complete', { 'for': ['c', 'cpp'] }
Plug 'SirVer/ultisnips'
Plug 'bps/vim-textobj-python', { 'for': 'python' }
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'eagletmt/neco-ghc', { 'for': 'haskell' }
Plug 'honza/vim-snippets'
Plug 'hynek/vim-python-pep8-indent', { 'for': 'python' }
Plug 'hdima/python-syntax', { 'for': 'python' }
Plug 'itchyny/vim-haskell-indent', { 'for': 'haskell' }
Plug 'jpalardy/vim-slime'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-plug'
Plug 'kana/vim-altr'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-function', { 'for': ['c', 'cpp'] }
Plug 'kana/vim-textobj-user'
Plug 'ledger/vim-ledger', { 'for': 'ledger' }
Plug 'mbbill/undotree'
Plug 'mhinz/vim-grepper'
Plug 'michaeljsmith/vim-indent-object'
Plug 'milkypostman/vim-togglelist'
Plug 'morhetz/gruvbox'
Plug 'nelstrom/vim-visual-star-search'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-sleuth'
Plug 'triglav/vim-visual-increment'
Plug 'wellle/targets.vim'
Plug 'nelstrom/vim-markdown-folding'
Plug 'w0rp/ale'
Plug 'editorconfig/editorconfig-vim'
Plug 'sheerun/vim-polyglot'

call plug#end()

filetype plugin indent on
syntax on

" Critical remaps
map <Space> <Leader>
nnoremap Y y$
inoremap jk <esc>
nnoremap ' `
nnoremap ` '
nnoremap - :Ex<CR>

" Repeat maps
vnoremap . :normal .<CR>
xnoremap @q :normal @q<CR>

" Spelling maps
inoremap <C-y> <c-g>u<Esc>[s1z=`]a<c-g>u
nnoremap <C-y> [s1z=<c-o>

" Mouse scrolling
set mouse=a

" Window resize maps
nnoremap <Left> 5<C-w><
nnoremap <Right> 5<C-w>>
nnoremap <Up> 5<C-w>-
nnoremap <Down> 5<C-w>+

" Window movement maps
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
inoremap <C-h> <esc><C-w>h
inoremap <C-j> <esc><C-w>j
inoremap <C-k> <esc><C-w>k
inoremap <C-l> <esc><C-w>l

" Misc maps
nnoremap <silent> dsa ds}dF\
inoremap <C-]> {<CR>}<esc>O
imap <c-x><c-g> <plug>(fzf-complete-path)
nnoremap gK :!cppman <C-r><C-w><CR>

" Commands
function! s:EditSameDir(filename)
    let l:newfile = expand('%:p:h') . '/' . a:filename
    execute 'edit' l:newfile
endfunction
command! -nargs=1 E call s:EditSameDir(<f-args>)

" Leader Mappings
nmap <Leader>ga <Plug>(altr-forward)
nnoremap <Leader>aes :s/\(\w\)/\U\1 <CR>:nohl<CR>
nnoremap <Leader>C :BCommits<CR>
nnoremap <Leader>T :!ctags -R<CR><CR>
nnoremap <Leader>V :sp<CR>
nnoremap <Leader>asc ggVG:Tab /;<CR>
nnoremap <Leader>bb :FZFBuffers<CR>
nnoremap <Leader>bd :bd<CR>
nnoremap <Leader>c :make -j9<CR>
nnoremap <Leader>fed :e $MYVIMRC<CR>
nnoremap <Leader>fl :FZFFiles ~/<CR>
nnoremap <Leader>fs :w<CR>
nnoremap <Leader>fmt :g/.*/norm gqqo<CR>:nohl<CR>gg
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gl :Glog<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gcc :!gcc -g -std=c99 % -o %< && ./%<<CR>
nnoremap <Leader>gpp :!g++ -g -std=c++11 % -o %< && ./%<<CR>
nnoremap <Leader>h :FZFHistory:<CR>
nnoremap <Leader>mt :make -j9 tests<CR>
nnoremap <Leader>pf :FZFFiles<CR>
nnoremap <Leader>pg :FZFTags<CR>
nnoremap <Leader>pi :PlugInstall<CR>
xnoremap <Leader>pr "ay :norm gvgs<CR> \| :cfdo :%s/<c-r>a//ce<left><left><left>
nnoremap <Leader>py :!python %<CR>
nnoremap <Leader>q :q!<CR>
nnoremap <Leader>rl :so $MYVIMRC<CR>
nnoremap <Leader>sh :.w !bash<CR>
nnoremap <Leader>sp :Grepper -query ""<left>
xnoremap <Leader>S :sort<CR>
nnoremap <Leader>o :FZFBLines<CR>
nnoremap <Leader>ta vip!pandoc -t markdown<CR>
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>ts :ALEToggle<CR>
nnoremap <Leader>tr :%s/\s*$//g<CR><C-o>zz
nnoremap <Leader>u :UndotreeToggle<CR>:UndotreeFocus<CR>
nnoremap <Leader>v :vs<CR>
nnoremap <script> <silent> <leader>el :call ToggleQuickfixList()<CR>
nnoremap <silent> <Leader>. :FZFRg <C-R><C-W><CR>
nnoremap <silent> <Leader>/ :FZFRg <CR>
nnoremap <silent> <Leader>sc :nohlsearch<CR>
noremap <Leader>G :Google<CR>

set pastetoggle=<Leader>pt

" Remove trailing whitespace function.
fun! RTW()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
command! RTW call RTW()

" ALE
" TODO find how to use compile_commands.json for this. Submit issue asking.
let g:ale_enabled = 0
let g:ale_set_quickfix = 1
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 0
let g:ale_python_pylint_use_global = 1
let g:ale_linters = {
\   'cpp': ['clangtidy'],
\   'python': ['pylint']
\}
let g:ale_sign_error = 'âœ˜'
let g:ale_sign_warning = 'âš '
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

" FZF
let g:fzf_command_prefix = 'FZF'
command! -bang -nargs=* FZFRg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Haskell
au FileType haskell nnoremap <buffer> <Leader>T :!hasktags .<CR><CR>
au FileType haskell setlocal omnifunc=necoghc#omnifunc
au FileType haskell setlocal makeprg=ghc\ -e\ :q\ %
au FileType haskell setlocal errorformat=
                \%-G,
                \%-Z\ %#,
                \%W%f:%l:%c:\ Warning:\ %m,
                \%E%f:%l:%c:\ %m,
                \%E%>%f:%l:%c:,
                \%+C\ \ %#%m,
                \%W%>%f:%l:%c:,
                \%+C\ \ %#%tarning:\ %m,

" Vim-grepper
let g:grepper = {'tools': ['rg', 'ag'], 'open': 0, 'jump': 0, 'prompt': 0}
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" Toggle list
let g:toggle_list_no_mappings = 1

" Clang-format
au Filetype c,cpp nnoremap <buffer> <leader>= mmggvG:!clang-format<CR>'m
au Filetype c,cpp xnoremap <buffer> <leader>= :!clang-format<CR>

" Clang complete (for c/c++)
let g:clang_library_path='/usr/lib'
let g:clang_complete_auto=0
let g:clang_user_options = '-std=c++11'
let g:clang_complete_macros=1
let g:clang_make_default_keymappings=0
if !empty(glob('./build/compile_commands.json'))
    let g:clang_use_library=1
    let g:clang_auto_user_options = 'compile_commands.json, .clang_complete, path'
    let g:clang_compilation_database = './build'
    call system("cp ./build/compile_commands.json .")
    set makeprg=ninja\ -C\ build
endif
au Filetype c,cpp nnoremap <silent> <buffer> g
    \ :call g:ClangGotoDeclaration()<CR>

" Cpp highlighting
let g:cpp_class_scope_highlight = 1

" Python: use pydoc for man-pages
" au FileType python setlocal keywordprg=pydoc
au FileType python setlocal makeprg=pylint\ -r\ n\ -f\ parseable\ %

" Python jedi
let g:jedi#auto_initialization = 0
let g:jedi#show_call_signatures = 0
aug jedi_group
    au!
    " au Filetype python call jedi#configure_call_signatures()
    au Filetype python setlocal omnifunc=jedi#completions
    au Filetype python nnoremap <silent> <buffer> K
        \ :call jedi#show_documentation()<CR>
    au Filetype python nnoremap <silent> <buffer> g
        \ :call jedi#goto()<CR>
aug END

au Filetype python nnoremap <buffer> <leader>= mmggvG:!black - -q 2>/dev/null<CR>'m
au Filetype python xnoremap <buffer> <leader>= :!yapf<CR>
au Filetype python nnoremap <buffer> <leader>db mmOimport ipdb; ipdb.set_trace()'m

" Rust racer
let g:racer_no_default_keymappings = 1
let g:racer_cmd = "/Users/thrash/.cargo/bin/racer"
aug rust_group
    au!
    au Filetype rust compiler rustc
    au Filetype rust nmap <buffer> g <Plug>(rust-def)
    au Filetype rust nmap <buffer> K <Plug>(rust-doc)
    au Filetype rust nnoremap <buffer> <leader>= mmggvG:!rustfmt<CR>'m
    au Filetype rust xnoremap <buffer> <leader>= :!rustfmt<CR>
    au Filetype rust let g:ale_rust_cargo_use_clippy=1
aug END

" Go
aug go_group
    let g:go_fmt_autosave = 0
    let g:go_def_mapping_enabled = 0
    let g:go_highlight_space_tab_error = 0
    let g:go_highlight_trailing_whitespace_error = 0
    let g:go_highlight_array_whitespace_error = 0
    au Filetype go nnoremap <buffer> <leader>= :GoFmt<CR>
    au Filetype go nmap <buffer> <leader>i :GoImports<CR>
    au Filetype go nmap <buffer> K <Plug>(go-doc-split)
    au Filetype go nmap <buffer> g <Plug>(go-def)
    au Filetype go xnoremap <buffer> <leader>= !gofmt<CR>
aug END

" Javascript
aug js_group
    au Filetype javascript,json nnoremap <buffer> <leader>= mmggvG:!prettier<CR>'m
    au Filetype javascript,json xnoremap <buffer> <leader>= :!prettier<CR>
aug END

" Markdown compatibility.
au BufNewFile,BufReadPost *.md setlocal filetype=markdown
au Filetype markdown setlocal commentstring=[//]:\ #\ (%s)

" Ultisnips
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips/'

aug prewrite_group
    au!
    " Remove trailing whitespace on save.
    au BufWritePre * :call RTW()
aug END

" Ledger
let g:ledger_align_at = 40
au Filetype ledger nnoremap <buffer> <leader>c :setlocal makeprg=ledger \
            \| make -f % balance<CR>
au Filetype ledger vnoremap <buffer> = :LedgerAlign<CR>

" Slime (for REPLs)
let g:slime_target = 'tmux'
let g:slime_paste_file = '$HOME/.slime_paste'
let g:slime_default_config = {'socket_name': 'default', 'target_pane': '0'}
let g:slime_no_mappings = 1
let g:slime_dont_ask_default = 1
let g:slime_python_ipython = 1
xmap <leader>s <Plug>SlimeRegionSend
nmap <leader>s <Plug>SlimeMotionSend
nmap <leader>ss <Plug>SlimeLineSend

" Disable ftplugin-mail maps.
let no_mail_maps=1

" Add to jumplist for multi j/k jumps.
nnoremap <silent> k :<C-U>execute 'normal!'
      \ (v:count > 1 ? "m'" . v:count : '') . 'k'<CR>
nnoremap <silent> j :<C-U>execute 'normal!'
      \ (v:count > 1 ? "m'" . v:count : '') . 'j'<CR>

" Color scheme must be loaded at the end.
set background=dark
colorscheme gruvbox

" Local config for mac
if exists('python_highlight_all')
    unlet python_highlight_all
endif
if exists('python_space_error_highlight')
    unlet python_space_error_highlight
endif
